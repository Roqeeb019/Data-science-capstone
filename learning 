{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMdPPwswotom3Ae4icujNSI",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Roqeeb019/Data-science-capstone/blob/main/learning%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 790
        },
        "id": "fX8cucukAP55",
        "outputId": "a64a9623-945c-4d42-d5e8-8d6347e2b587"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      accident_id            timestamp    state    local_govt   road_type  \\\n",
              "0         A100000  2021-10-03 18:16:54   Rivers         Eleme     Highway   \n",
              "1         A100001  2021-05-12 11:47:18    Enugu  Ibadan North  Local Road   \n",
              "2         A100002  2024-02-25 04:22:46  Anambra    Awka South      Bridge   \n",
              "3         A100003  2025-05-09 01:59:59   Kaduna  Ibadan North  Local Road   \n",
              "4         A100004  2025-07-15 00:15:22   Rivers         Ikeja      Bridge   \n",
              "...           ...                  ...      ...           ...         ...   \n",
              "19995     A119995  2023-10-25 01:05:09      Oyo        Sapele  Expressway   \n",
              "19996     A119996  2023-03-20 09:11:35      Oyo    Awka South      Bridge   \n",
              "19997     A119997  2020-06-17 19:57:35     Kano         Bichi  Expressway   \n",
              "19998     A119998  2022-02-15 03:41:03      Oyo    Awka South  Local Road   \n",
              "19999     A119999  2024-08-17 12:28:11      Oyo        Sapele  Expressway   \n",
              "\n",
              "           road_condition weather_condition     light_condition vehicle_type  \\\n",
              "0                     Wet             Foggy    Night (no light)          Car   \n",
              "1                Slippery             Foggy    Night (no light)   Motorcycle   \n",
              "2                Potholes            Cloudy            Daylight          Car   \n",
              "3                Potholes             Sunny            Daylight          Bus   \n",
              "4                Slippery             Sunny  Night (with light)     Tricycle   \n",
              "...                   ...               ...                 ...          ...   \n",
              "19995            Potholes             Dusty    Night (no light)          Car   \n",
              "19996                 Wet             Sunny            Daylight          Bus   \n",
              "19997  Under construction            Cloudy            Daylight     Tricycle   \n",
              "19998  Under construction             Foggy  Night (with light)   Motorcycle   \n",
              "19999            Potholes             Sunny    Night (no light)   Motorcycle   \n",
              "\n",
              "       vehicle_age  ...  speed_estimate seat_belt_used  num_vehicles_involved  \\\n",
              "0               18  ...             115            Yes                      3   \n",
              "1               23  ...             147            Yes                      1   \n",
              "2               16  ...             136            Yes                      1   \n",
              "3               11  ...              66             No                      1   \n",
              "4               19  ...              32            Yes                      1   \n",
              "...            ...  ...             ...            ...                    ...   \n",
              "19995            4  ...             100            Yes                      1   \n",
              "19996            9  ...             146            Yes                      2   \n",
              "19997           16  ...             132             No                      1   \n",
              "19998           12  ...             135            Yes                      2   \n",
              "19999           13  ...             149            Yes                      1   \n",
              "\n",
              "      num_casualties  num_fatalities police_response_time  \\\n",
              "0                  1               0                   43   \n",
              "1                  2               0                   48   \n",
              "2                  0               0                   26   \n",
              "3                  3               0                   18   \n",
              "4                  1               0                   35   \n",
              "...              ...             ...                  ...   \n",
              "19995              0               2                    8   \n",
              "19996              0               0                   52   \n",
              "19997              0               0                   28   \n",
              "19998              0               0                   28   \n",
              "19999              3               0                   26   \n",
              "\n",
              "       hospital_response_time   accident_cause  collision_type  severity  \n",
              "0                          41    Brake failure        Rear-end     Minor  \n",
              "1                          42    Over-speeding        Rear-end   Serious  \n",
              "2                          48    Brake failure         Head-on   Serious  \n",
              "3                          45  Poor visibility       Roll-over     Minor  \n",
              "4                          86    Drunk driving            Side   Serious  \n",
              "...                       ...              ...             ...       ...  \n",
              "19995                      56    Drunk driving         Head-on     Minor  \n",
              "19996                      59    Brake failure         Head-on     Minor  \n",
              "19997                      25  Poor visibility      Pedestrian     Minor  \n",
              "19998                      20    Over-speeding         Head-on     Minor  \n",
              "19999                      70    Brake failure       Roll-over     Minor  \n",
              "\n",
              "[20000 rows x 24 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-531d9551-d8fc-4195-b7d8-63206bc3ff3e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>accident_id</th>\n",
              "      <th>timestamp</th>\n",
              "      <th>state</th>\n",
              "      <th>local_govt</th>\n",
              "      <th>road_type</th>\n",
              "      <th>road_condition</th>\n",
              "      <th>weather_condition</th>\n",
              "      <th>light_condition</th>\n",
              "      <th>vehicle_type</th>\n",
              "      <th>vehicle_age</th>\n",
              "      <th>...</th>\n",
              "      <th>speed_estimate</th>\n",
              "      <th>seat_belt_used</th>\n",
              "      <th>num_vehicles_involved</th>\n",
              "      <th>num_casualties</th>\n",
              "      <th>num_fatalities</th>\n",
              "      <th>police_response_time</th>\n",
              "      <th>hospital_response_time</th>\n",
              "      <th>accident_cause</th>\n",
              "      <th>collision_type</th>\n",
              "      <th>severity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>A100000</td>\n",
              "      <td>2021-10-03 18:16:54</td>\n",
              "      <td>Rivers</td>\n",
              "      <td>Eleme</td>\n",
              "      <td>Highway</td>\n",
              "      <td>Wet</td>\n",
              "      <td>Foggy</td>\n",
              "      <td>Night (no light)</td>\n",
              "      <td>Car</td>\n",
              "      <td>18</td>\n",
              "      <td>...</td>\n",
              "      <td>115</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>43</td>\n",
              "      <td>41</td>\n",
              "      <td>Brake failure</td>\n",
              "      <td>Rear-end</td>\n",
              "      <td>Minor</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>A100001</td>\n",
              "      <td>2021-05-12 11:47:18</td>\n",
              "      <td>Enugu</td>\n",
              "      <td>Ibadan North</td>\n",
              "      <td>Local Road</td>\n",
              "      <td>Slippery</td>\n",
              "      <td>Foggy</td>\n",
              "      <td>Night (no light)</td>\n",
              "      <td>Motorcycle</td>\n",
              "      <td>23</td>\n",
              "      <td>...</td>\n",
              "      <td>147</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>48</td>\n",
              "      <td>42</td>\n",
              "      <td>Over-speeding</td>\n",
              "      <td>Rear-end</td>\n",
              "      <td>Serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>A100002</td>\n",
              "      <td>2024-02-25 04:22:46</td>\n",
              "      <td>Anambra</td>\n",
              "      <td>Awka South</td>\n",
              "      <td>Bridge</td>\n",
              "      <td>Potholes</td>\n",
              "      <td>Cloudy</td>\n",
              "      <td>Daylight</td>\n",
              "      <td>Car</td>\n",
              "      <td>16</td>\n",
              "      <td>...</td>\n",
              "      <td>136</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>26</td>\n",
              "      <td>48</td>\n",
              "      <td>Brake failure</td>\n",
              "      <td>Head-on</td>\n",
              "      <td>Serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>A100003</td>\n",
              "      <td>2025-05-09 01:59:59</td>\n",
              "      <td>Kaduna</td>\n",
              "      <td>Ibadan North</td>\n",
              "      <td>Local Road</td>\n",
              "      <td>Potholes</td>\n",
              "      <td>Sunny</td>\n",
              "      <td>Daylight</td>\n",
              "      <td>Bus</td>\n",
              "      <td>11</td>\n",
              "      <td>...</td>\n",
              "      <td>66</td>\n",
              "      <td>No</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>45</td>\n",
              "      <td>Poor visibility</td>\n",
              "      <td>Roll-over</td>\n",
              "      <td>Minor</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>A100004</td>\n",
              "      <td>2025-07-15 00:15:22</td>\n",
              "      <td>Rivers</td>\n",
              "      <td>Ikeja</td>\n",
              "      <td>Bridge</td>\n",
              "      <td>Slippery</td>\n",
              "      <td>Sunny</td>\n",
              "      <td>Night (with light)</td>\n",
              "      <td>Tricycle</td>\n",
              "      <td>19</td>\n",
              "      <td>...</td>\n",
              "      <td>32</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>35</td>\n",
              "      <td>86</td>\n",
              "      <td>Drunk driving</td>\n",
              "      <td>Side</td>\n",
              "      <td>Serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19995</th>\n",
              "      <td>A119995</td>\n",
              "      <td>2023-10-25 01:05:09</td>\n",
              "      <td>Oyo</td>\n",
              "      <td>Sapele</td>\n",
              "      <td>Expressway</td>\n",
              "      <td>Potholes</td>\n",
              "      <td>Dusty</td>\n",
              "      <td>Night (no light)</td>\n",
              "      <td>Car</td>\n",
              "      <td>4</td>\n",
              "      <td>...</td>\n",
              "      <td>100</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>56</td>\n",
              "      <td>Drunk driving</td>\n",
              "      <td>Head-on</td>\n",
              "      <td>Minor</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19996</th>\n",
              "      <td>A119996</td>\n",
              "      <td>2023-03-20 09:11:35</td>\n",
              "      <td>Oyo</td>\n",
              "      <td>Awka South</td>\n",
              "      <td>Bridge</td>\n",
              "      <td>Wet</td>\n",
              "      <td>Sunny</td>\n",
              "      <td>Daylight</td>\n",
              "      <td>Bus</td>\n",
              "      <td>9</td>\n",
              "      <td>...</td>\n",
              "      <td>146</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>52</td>\n",
              "      <td>59</td>\n",
              "      <td>Brake failure</td>\n",
              "      <td>Head-on</td>\n",
              "      <td>Minor</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19997</th>\n",
              "      <td>A119997</td>\n",
              "      <td>2020-06-17 19:57:35</td>\n",
              "      <td>Kano</td>\n",
              "      <td>Bichi</td>\n",
              "      <td>Expressway</td>\n",
              "      <td>Under construction</td>\n",
              "      <td>Cloudy</td>\n",
              "      <td>Daylight</td>\n",
              "      <td>Tricycle</td>\n",
              "      <td>16</td>\n",
              "      <td>...</td>\n",
              "      <td>132</td>\n",
              "      <td>No</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>28</td>\n",
              "      <td>25</td>\n",
              "      <td>Poor visibility</td>\n",
              "      <td>Pedestrian</td>\n",
              "      <td>Minor</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19998</th>\n",
              "      <td>A119998</td>\n",
              "      <td>2022-02-15 03:41:03</td>\n",
              "      <td>Oyo</td>\n",
              "      <td>Awka South</td>\n",
              "      <td>Local Road</td>\n",
              "      <td>Under construction</td>\n",
              "      <td>Foggy</td>\n",
              "      <td>Night (with light)</td>\n",
              "      <td>Motorcycle</td>\n",
              "      <td>12</td>\n",
              "      <td>...</td>\n",
              "      <td>135</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>28</td>\n",
              "      <td>20</td>\n",
              "      <td>Over-speeding</td>\n",
              "      <td>Head-on</td>\n",
              "      <td>Minor</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19999</th>\n",
              "      <td>A119999</td>\n",
              "      <td>2024-08-17 12:28:11</td>\n",
              "      <td>Oyo</td>\n",
              "      <td>Sapele</td>\n",
              "      <td>Expressway</td>\n",
              "      <td>Potholes</td>\n",
              "      <td>Sunny</td>\n",
              "      <td>Night (no light)</td>\n",
              "      <td>Motorcycle</td>\n",
              "      <td>13</td>\n",
              "      <td>...</td>\n",
              "      <td>149</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>26</td>\n",
              "      <td>70</td>\n",
              "      <td>Brake failure</td>\n",
              "      <td>Roll-over</td>\n",
              "      <td>Minor</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>20000 rows × 24 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-531d9551-d8fc-4195-b7d8-63206bc3ff3e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-531d9551-d8fc-4195-b7d8-63206bc3ff3e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-531d9551-d8fc-4195-b7d8-63206bc3ff3e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-353a9b6b-b3cf-498a-8a09-d151f3383dc8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-353a9b6b-b3cf-498a-8a09-d151f3383dc8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-353a9b6b-b3cf-498a-8a09-d151f3383dc8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_6b95611c-50c0-4a27-adc1-ab156041c6ae\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6b95611c-50c0-4a27-adc1-ab156041c6ae button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "df=pd.read_csv(r\"/content/road_accident_severity_nigeria_20000.csv\")\n",
        "df\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Which road condition is most associated with fatal crashes?\n",
        "fatality=df[df[\"severity\"]==\"Fatal\"]\n",
        "RC_fatal=fatality.groupby(\"road_condition\").count()[\"severity\"]\n",
        "RC_fatal"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "H9y3gHTLECzQ",
        "outputId": "dc6e7a32-8960-4ca7-abbe-f447631f912e"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "road_condition\n",
              "Dry                   184\n",
              "Potholes              209\n",
              "Slippery              199\n",
              "Under construction    181\n",
              "Wet                   197\n",
              "Name: severity, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>severity</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>road_condition</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Dry</th>\n",
              "      <td>184</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Potholes</th>\n",
              "      <td>209</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Slippery</th>\n",
              "      <td>199</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Under construction</th>\n",
              "      <td>181</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Wet</th>\n",
              "      <td>197</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "RC_fatal=fatality.groupby(\"road_condition\").count()[\"severity\"].head(1)"
      ],
      "metadata": {
        "id": "LFl9ZnDDEC47"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#What are the average police and hospital response times by severity?\n",
        "AVP=df.groupby(\"severity\")[\"police_response_time\"]\n",
        "AVP.mean()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "vvwI283HEC7r",
        "outputId": "253fc785-b1c1-4c69-d667-1716896aaeda"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "severity\n",
              "Fatal      31.176289\n",
              "Minor      32.224697\n",
              "Serious    32.166135\n",
              "Name: police_response_time, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>police_response_time</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>severity</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Fatal</th>\n",
              "      <td>31.176289</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Minor</th>\n",
              "      <td>32.224697</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Serious</th>\n",
              "      <td>32.166135</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "AVh=df.groupby(\"severity\")[\"hospital_response_time\"]\n",
        "AVh.mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "349kzoTEEC-e",
        "outputId": "260eadfa-6567-409e-e989-ce1bf2a8a23e"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "severity\n",
              "Fatal      49.175258\n",
              "Minor      49.399215\n",
              "Serious    49.813546\n",
              "Name: hospital_response_time, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hospital_response_time</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>severity</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Fatal</th>\n",
              "      <td>49.175258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Minor</th>\n",
              "      <td>49.399215</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Serious</th>\n",
              "      <td>49.813546</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# How does alcohol involvement affect the likelihood of fatal accidents"
      ],
      "metadata": {
        "id": "79iT5FE9EDBW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fatality=df[df[\"severity\"]==\"Fatal\"]\n",
        "alcohol=fatality.groupby(\"alcohol_involved\").count()[\"severity\"]\n",
        "alcohol"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "84siOxbVEDEO",
        "outputId": "c8cd7888-4ebc-4b5e-e738-e4b564e5f2eb"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "alcohol_involved\n",
              "No     785\n",
              "Yes    185\n",
              "Name: severity, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>severity</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>alcohol_involved</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>No</th>\n",
              "      <td>785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Yes</th>\n",
              "      <td>185</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#How does seat belt usage relate to accident severity\n",
        "seatbelt=df.groupby(\"seat_belt_used\")[\"severity\"]\n",
        "seatbelt.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "GExP_E_sKpab",
        "outputId": "3b90e515-d453-4414-cb2e-f893a6220bd8"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "seat_belt_used  severity\n",
              "No              Minor        3516\n",
              "                Serious      1250\n",
              "                Fatal         248\n",
              "Yes             Minor       10494\n",
              "                Serious      3770\n",
              "                Fatal         722\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>seat_belt_used</th>\n",
              "      <th>severity</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">No</th>\n",
              "      <th>Minor</th>\n",
              "      <td>3516</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Serious</th>\n",
              "      <td>1250</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fatal</th>\n",
              "      <td>248</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Yes</th>\n",
              "      <th>Minor</th>\n",
              "      <td>10494</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Serious</th>\n",
              "      <td>3770</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fatal</th>\n",
              "      <td>722</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#What is the relationship between estimated speed and severity?\n",
        "speed=df.groupby(\"severity\")[\"speed_estimate\"]\n",
        "x=speed.value_counts()\n",
        "x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "8rfNcbKlKpjk",
        "outputId": "e17b13e3-8982-4119-89ce-32d2c7b667f9"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "severity  speed_estimate\n",
              "Fatal     31                17\n",
              "          139               17\n",
              "          36                13\n",
              "          118               13\n",
              "          128               13\n",
              "                            ..\n",
              "Serious   49                24\n",
              "          62                24\n",
              "          132               24\n",
              "          117               23\n",
              "          121               22\n",
              "Name: count, Length: 420, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>severity</th>\n",
              "      <th>speed_estimate</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"5\" valign=\"top\">Fatal</th>\n",
              "      <th>31</th>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139</th>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>118</th>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>128</th>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"5\" valign=\"top\">Serious</th>\n",
              "      <th>49</th>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>132</th>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>117</th>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>121</th>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>420 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " #Which collision type (rear-end, head-on, etc.) leads to more fatalities?\n",
        "fatality=df[df[\"severity\"]==\"Fatal\"]\n",
        "collision_typex=fatality.groupby(\"collision_type\")[\"severity\"]\n",
        "collision_typex.value_counts()\n",
        "#answer is head-on"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "bRMa4Z0vKpo2",
        "outputId": "0ff38881-c093-4bd8-85f2-cb108cf103e4"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "collision_type  severity\n",
              "Head-on         Fatal       206\n",
              "Pedestrian      Fatal       176\n",
              "Rear-end        Fatal       193\n",
              "Roll-over       Fatal       203\n",
              "Side            Fatal       192\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>collision_type</th>\n",
              "      <th>severity</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Head-on</th>\n",
              "      <th>Fatal</th>\n",
              "      <td>206</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pedestrian</th>\n",
              "      <th>Fatal</th>\n",
              "      <td>176</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rear-end</th>\n",
              "      <th>Fatal</th>\n",
              "      <td>193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Roll-over</th>\n",
              "      <th>Fatal</th>\n",
              "      <td>203</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Side</th>\n",
              "      <th>Fatal</th>\n",
              "      <td>192</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# How many vehicles are usually involved in serious vs minor accidents\n",
        "veh_involved1=df[df[\"severity\"]==\"Minor\"]\n",
        "veh_involved1.groupby(\"num_vehicles_involved\")\n",
        "veh_involved1.groupby(\"num_vehicles_involved\").count()[\"severity\"]\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "8djqYz3_Kpsg",
        "outputId": "139f3720-5382-45dc-b07c-1cd2bbf5c3e5"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "num_vehicles_involved\n",
              "1    8333\n",
              "2    4263\n",
              "3    1414\n",
              "Name: severity, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>severity</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>num_vehicles_involved</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4263</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1414</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "veh_involved2=df[df[\"severity\"]==\"Serious\"]\n",
        "veh_involved2.groupby(\"num_vehicles_involved\")\n",
        "veh_involved2.groupby(\"num_vehicles_involved\").count()[\"severity\"]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "AwG3lxW3RJgs",
        "outputId": "8db87f8f-f832-41ef-f91b-5bbc6146f0ed"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "num_vehicles_involved\n",
              "1    3036\n",
              "2    1441\n",
              "3     543\n",
              "Name: severity, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>severity</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>num_vehicles_involved</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3036</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1441</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>543</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " #Which weather conditions correspond to the most accidents?\n",
        "weather_checking=df.value_counts(\"weather_condition\")\n",
        "weather_checking.head(1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 146
        },
        "id": "7OAK2J8aRJld",
        "outputId": "b60e391a-8c15-41f4-e82a-32ccda987b5f"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "weather_condition\n",
              "Sunny    4067\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weather_condition</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Sunny</th>\n",
              "      <td>4067</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#What month or season has the highest number of accidents\n"
      ],
      "metadata": {
        "id": "R7OtxvQIRJpQ"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "emerge_avg=df.groupby(\"state\")[\"hospital_response_time\"]\n",
        "x=emerge_avg.mean()\n",
        "import matplotlib.pyplot as plt\n",
        "x.plot(kind=\"bar\")\n",
        "plt.title(\"Average hospital response time by state\")\n",
        "plt.xlabel(\"State\")\n",
        "plt.ylabel(\"Average hospital response time\")\n",
        "plt.show()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "ZnKgFtfxTftM",
        "outputId": "df391377-495c-4348-f1e2-5affdb9d68a2"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " #Is there a trend between driver experience and accident severity\n",
        " expo=df.groupby(\"severity\")[\"driver_experience\"]\n",
        " expo.value_counts().describe()\n",
        " #Yes there is a trend\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "TZVM5qEoTfv7",
        "outputId": "eebe9fd3-e8d6-477f-cdda-a9c46c9483ec"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    117.000000\n",
              "mean     170.940171\n",
              "std      140.891392\n",
              "min       15.000000\n",
              "25%       28.000000\n",
              "50%      126.000000\n",
              "75%      343.000000\n",
              "max      400.000000\n",
              "Name: count, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>117.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>170.940171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>140.891392</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>15.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>28.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>126.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>343.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>400.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gd9lgnyFTfye"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "7WPcnZMjTf1j"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}